import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_wine, load_iris, load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# =======================
# Sidebar chọn dataset
# =======================
st.sidebar.title("⚙️ Tùy chọn")
dataset_name = st.sidebar.selectbox("Chọn Dataset", ["Wine", "Iris", "Breast Cancer"])

def load_dataset(name):
    if name == "Wine":
        data = load_wine()
    elif name == "Iris":
        data = load_iris()
    else:
        data = load_breast_cancer()
    X = pd.DataFrame(data.data, columns=data.feature_names)
    y = pd.Series(data.target, name="target")
    return X, y, data

X, y, data_info = load_dataset(dataset_name)

# =======================
# Hiển thị dataset
# =======================
st.title("🌳 Random Forest Classifier Demo")
st.write(f"### 📊 Dataset: {dataset_name}")
st.write("Số mẫu:", X.shape[0], " | Số đặc trưng:", X.shape[1])
st.dataframe(X.head())

# =======================
# EDA - Phân tích dữ liệu
# =======================
if st.checkbox("🔍 Hiển thị thống kê dữ liệu"):
    st.write(X.describe())

if st.checkbox("📈 Vẽ phân phối các đặc trưng"):
    fig, ax = plt.subplots(figsize=(10, 6))
    X.hist(ax=ax)
    st.pyplot(fig)

# =======================
# Cấu hình mô hình
# =======================
st.sidebar.subheader("Cấu hình Random Forest")
n_estimators = st.sidebar.slider("Số cây (n_estimators)", 10, 300, 100, 10)
max_depth = st.sidebar.slider("Độ sâu tối đa (max_depth)", 1, 20, 5, 1)
criterion = st.sidebar.selectbox("Tiêu chuẩn chia nhánh", ["gini", "entropy", "log_loss"])
test_size = st.sidebar.slider("Tỷ lệ test", 0.1, 0.5, 0.3, 0.05)

# =======================
# Tạo mô hình tạm để tính feature importance
# (phải làm trước khi chọn top_features)
# =======================
temp_model = RandomForestClassifier(random_state=42)
temp_model.fit(X, y)
feat_importances = pd.Series(temp_model.feature_importances_, index=X.columns).sort_values(ascending=False)

# =======================
# Chọn số đặc trưng quan trọng để dự đoán
# =======================
st.sidebar.subheader("Chọn số đặc trưng quan trọng để nhập dự đoán")
top_k = st.sidebar.slider("Số đặc trưng quan trọng", 1, len(X.columns), 3)
top_features = feat_importances.head(top_k).index.tolist()
st.write(f"👉 Các đặc trưng được chọn: {top_features}")

# =======================
# Huấn luyện mô hình (chỉ dùng top_features)
# =======================
X_train, X_test, y_train, y_test = train_test_split(
    X[top_features], y, test_size=test_size, random_state=42
)

model = RandomForestClassifier(
    n_estimators=n_estimators,
    max_depth=max_depth,
    criterion=criterion,
    random_state=42
)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# =======================
# Kết quả
# =======================
acc = accuracy_score(y_test, y_pred)
st.write(f"### 🎯 Độ chính xác mô hình: **{acc:.2f}**")

st.write("### 🔎 Confusion Matrix")
fig, ax = plt.subplots()
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Blues", ax=ax)
st.pyplot(fig)

st.write("### 📑 Classification Report")
st.text(classification_report(y_test, y_pred))

# =======================
# Feature Importance (theo mô hình cuối cùng)b
# =======================
st.write("### 🌟 Feature Importance (theo mô hình chọn top_features)")
final_importances = pd.Series(model.feature_importances_, index=top_features).sort_values(ascending=False)
st.bar_chart(final_importances)

# =======================
# Dự đoán mẫu mới
# =======================
st.write("### 🧪 Thử dự đoán mẫu mới")
sample_input = {}
for col in top_features:
    sample_input[col] = st.number_input(
        f"{col}",
        float(X[col].min()),
        float(X[col].max()),
        float(X[col].mean())
    )

if st.button("Dự đoán"):
    input_df = pd.DataFrame([sample_input])
    prediction = model.predict(input_df[top_features])[0]
    st.success(f"Kết quả dự đoán: **{data_info.target_names[prediction]}**")
